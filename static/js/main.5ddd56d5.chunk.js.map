{"version":3,"sources":["components/Dropdown.js","components/CustomCheckbox.js","components/RegistrationForm.js","components/App.js","index.js"],"names":["Dropdown","field","form","setFieldValue","setFieldTouched","useState","isOpened","switchDropdown","inputRef","useRef","dropdownRef","dropdownClass","cn","dropdownArrowClass","handleSelect","value","className","placeholder","type","readOnly","onClick","onBlur","relatedTarget","current","focus","ref","tabIndex","map","toString","CustomCheckbox","props","id","checked","htmlFor","href","requiredTextForField","signupSchema","Yup","shape","name","matches","required","email","number","phone","language","requiredCondition","oneOf","CustomErrorMessage","useFormikContext","errors","touched","initialValues","RegistrationForm","formik","useFormik","initialErrors","validationSchema","onSubmit","values","actions","setTimeout","alert","JSON","stringify","resetForm","isSubmitting","isValid","component","disabled","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ddd56d5.chunk.js","sourcesContent":["import { useState, useRef } from 'react';\nimport cn from 'classnames';\n\nconst Dropdown = ({\n  field,\n  form: { setFieldValue, setFieldTouched },\n}) => {\n  const [isOpened, switchDropdown] = useState(false);\n  const inputRef = useRef(null);\n  const dropdownRef = useRef(null);\n\n  const dropdownClass = cn('dropdown__list', {\n    'dropdown__list--opened': isOpened,\n    'dropdown__list--closed': !isOpened,\n  });\n\n  const dropdownArrowClass = cn('dropdown__arrow', {\n    'dropdown__arrow--rotated': isOpened,\n  });\n\n  const handleClick = () => {\n    switchDropdown(!isOpened);\n  };\n\n  const handleBlur = ({ relatedTarget }) => {\n    setFieldTouched('language', true);\n\n    if (dropdownRef.current === relatedTarget) {\n      return inputRef.current.focus();\n    }\n\n    return switchDropdown(false);\n  };\n\n  const handleSelect = (value) => () => {\n    setFieldValue('language', value);\n    switchDropdown(false);\n  };\n\n  const languages = ['Русский', 'Английский', 'Китайский', 'Испанский'];\n\n  return (\n    <div className=\"dropdown\">\n      <input\n        className=\"field dropdown__button\"\n        placeholder=\"Язык\"\n        type=\"text\"\n        readOnly\n        onClick={handleClick}\n        onBlur={handleBlur}\n        value={field.value}\n        ref={inputRef}\n      />\n      <span className={dropdownArrowClass} />\n      <ul className={dropdownClass} tabIndex={-1} ref={dropdownRef}>\n        {languages.map((value) => (\n          <li\n            className=\"dropdown__item\"\n            key={value.toString()}\n            onClick={handleSelect(value)}\n          >\n            {value}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Dropdown;\n","const CustomCheckbox = ({ field, form, ...props }) => (\n  <div className=\"checkbox\">\n    <input\n      className=\"checkbox__item\"\n      type=\"checkbox\"\n      id=\"requiredCondition\"\n      checked={field.value}\n      {...props}\n      {...field}\n    />\n    <label htmlFor=\"requiredCondition\" />\n    <div className=\"checkbox__text-container\">\n      <span className=\"checkbox__text\">Принимаю&nbsp;</span>\n      <a href=\"#some/path\" className=\"checkbox__text--link\">условия</a>\n      <span className=\"checkbox__text\">&nbsp;использования</span>\n    </div>\n  </div>\n);\n\nexport default CustomCheckbox;\n","import {\n  FormikProvider, Field, useFormik, Form, useFormikContext,\n} from 'formik';\nimport * as Yup from 'yup';\nimport 'yup-phone';\nimport Dropdown from './Dropdown';\nimport CustomCheckbox from './CustomCheckbox';\nimport './RegistrationForm.scss';\n\nconst requiredTextForField = 'Обязательное поле для заполнения.';\nconst signupSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[aA-zZ\\s-]+$/,\n      'Поле не может содержать цифры и символы кроме пробела и дефиса.',\n    )\n    .required(requiredTextForField),\n  email: Yup.string()\n    .email('Введено неккоректное значение.')\n    .required(requiredTextForField),\n  number: Yup.string()\n    .required(requiredTextForField)\n    .phone('RU', true, 'Введено неккоректное значение.'),\n  language: Yup.string()\n    .required('Выберите язык.'),\n  requiredCondition: Yup.boolean()\n    .oneOf([true], 'Ознакомтесь с условиями.'),\n});\n\nconst CustomErrorMessage = ({ name }) => {\n  const { errors, touched } = useFormikContext();\n  return (\n    <span className=\"form__error-message\">\n      {(touched[name] && errors[name]) ? errors[name] : null}\n    </span>\n  );\n};\n\nconst initialValues = {\n  name: '',\n  email: '',\n  number: '',\n  language: '',\n  requiredCondition: false,\n};\n\nconst RegistrationForm = () => {\n  const formik = useFormik({\n    initialValues,\n    initialErrors: initialValues,\n    validationSchema: signupSchema,\n    onSubmit: (values, actions) => {\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        actions.resetForm();\n      }, 1000);\n    },\n  });\n\n  const { isSubmitting, isValid, values } = formik;\n\n  return (\n    <FormikProvider value={formik}>\n      <Form className=\"form\">\n        <span className=\"form__header\">\n          Регистрация\n        </span>\n        <div className=\"form__text-block\">\n          <span className=\"form__text\">\n            Уже есть аккаунт?\n          </span>\n          <a href=\"#some/path\" className=\"form__text form__text--link\">\n            Войти\n          </a>\n        </div>\n        <div className=\"form__fields\">\n          <div className=\"form__field-block\">\n            <label className=\"form__field-name\" htmlFor=\"name\">Имя</label>\n            <Field\n              id=\"name\"\n              name=\"name\"\n              type=\"text\"\n              className=\"field\"\n              placeholder=\"Введите ваше имя\"\n              value={values.name}\n            />\n            <CustomErrorMessage name=\"name\" />\n          </div>\n          <div className=\"form__field-block\">\n            <label className=\"form__field-name\" htmlFor=\"email\">Email</label>\n            <Field\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              className=\"field\"\n              placeholder=\"Введите ваш email\"\n              value={values.email}\n            />\n            <CustomErrorMessage name=\"email\" />\n          </div>\n          <div className=\"form__field-block\">\n            <label className=\"form__field-name\" htmlFor=\"number\">\n              Номер телефона\n            </label>\n            <Field\n              id=\"number\"\n              name=\"number\"\n              type=\"text\"\n              className=\"field\"\n              placeholder=\"Введите ваш номер\"\n              value={values.number}\n            />\n            <CustomErrorMessage name=\"number\" />\n          </div>\n          <div className=\"form__field-block\">\n            <label className=\"form__field-name\" htmlFor=\"language\">Язык</label>\n            <Field\n              id=\"language\"\n              name=\"language\"\n              component={Dropdown}\n            />\n            <CustomErrorMessage name=\"language\" />\n          </div>\n          <div className=\"form__field-block\">\n            <Field\n              name=\"requiredCondition\"\n              component={CustomCheckbox}\n            />\n            <CustomErrorMessage name=\"requiredCondition\" />\n          </div>\n        </div>\n        <div className=\"form__btn-container\">\n          <button\n            type=\"submit\"\n            className=\"btn\"\n            disabled={isSubmitting || !isValid}\n          >\n            Зарегестрироваться\n          </button>\n        </div>\n      </Form>\n    </FormikProvider>\n  );\n};\n\nexport default RegistrationForm;\n","import './App.css';\nimport RegistrationForm from './RegistrationForm';\n\nconst App = () => (\n  <div className=\"App\">\n    <RegistrationForm />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}